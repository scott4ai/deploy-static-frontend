AWSTemplateFormatVersion: '2010-09-09'
Description: 'HITL Platform - Application Stack - Equivalent to terraform/app'

Parameters:
  Environment:
    Type: String
    Description: Environment name (dev, stage, prod)
    AllowedValues: [dev, stage, prod]
    Default: dev

  ProjectName:
    Type: String
    Description: Project name for resource naming
    Default: hitl

  VpcStackName:
    Type: String
    Description: Name of the VPC CloudFormation stack
    Default: hitl-dev-vpc

  ImageBuilderStackName:
    Type: String
    Description: Name of the Image Builder CloudFormation stack
    Default: hitl-dev-image-builder

  # EC2 Configuration
  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t3.small
    AllowedValues: [t3.micro, t3.small, t3.medium, t3.large, t3.xlarge]

  MinSize:
    Type: Number
    Description: Minimum number of EC2 instances
    Default: 2
    MinValue: 1
    MaxValue: 10

  MaxSize:
    Type: Number
    Description: Maximum number of EC2 instances
    Default: 4
    MinValue: 1
    MaxValue: 20

  DesiredCapacity:
    Type: Number
    Description: Desired number of EC2 instances
    Default: 2
    MinValue: 1
    MaxValue: 10

  CustomAmiId:
    Type: String
    Description: Custom AMI ID (golden AMI from image builder)
    Default: ''

  # Application Configuration
  DomainName:
    Type: String
    Description: Domain name for SSL certificate (optional)
    Default: ''

  SslCertificateArn:
    Type: String
    Description: SSL certificate ARN (optional, will create if not provided)
    Default: ''

  CreateRoute53Records:
    Type: String
    Description: Create Route 53 DNS records for ACM certificate validation
    Default: 'false'
    AllowedValues: ['true', 'false']

  Route53ZoneId:
    Type: String
    Description: Route 53 hosted zone ID for the domain
    Default: ''

  # Lambda Configuration
  LambdaZipPath:
    Type: String
    Description: S3 key path to Lambda deployment zip file
    Default: lambda-backend/deployment.zip

  LambdaHandler:
    Type: String
    Description: Lambda function handler
    Default: index.handler

  LambdaRuntime:
    Type: String
    Description: Lambda runtime
    Default: nodejs22.x
    AllowedValues: [nodejs18.x, nodejs20.x, nodejs22.x, python3.9, python3.10, python3.11]

  LambdaTimeout:
    Type: Number
    Description: Lambda timeout in seconds
    Default: 30
    MinValue: 1
    MaxValue: 900

  LambdaMemory:
    Type: Number
    Description: Lambda memory in MB
    Default: 128
    MinValue: 128
    MaxValue: 10240

  # Cognito Configuration
  CognitoUserPoolId:
    Type: String
    Description: Cognito User Pool ID for Lambda authentication
    Default: ''

  CognitoUserPoolClientId:
    Type: String
    Description: Cognito User Pool Client ID for Lambda authentication
    Default: ''

  # WAF Configuration
  EnableWaf:
    Type: String
    Description: Enable AWS WAF
    Default: 'true'
    AllowedValues: ['true', 'false']

  WafRateLimit:
    Type: Number
    Description: WAF rate limit per 5 minutes
    Default: 2000
    MinValue: 100
    MaxValue: 100000

  # Monitoring Configuration
  EnableDetailedMonitoring:
    Type: String
    Description: Enable detailed CloudWatch monitoring
    Default: 'true'
    AllowedValues: ['true', 'false']

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention in days
    Default: 30
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

Conditions:
  UseCustomAmi: !Not [!Equals [!Ref CustomAmiId, '']]
  HasDomain: !Not [!Equals [!Ref DomainName, '']]
  HasCertificate: !Not [!Equals [!Ref SslCertificateArn, '']]
  NeedsCertificate: !And [!Condition HasDomain, !Not [!Condition HasCertificate]]
  UseHttps: !Or [!Condition HasCertificate, !Condition HasDomain]
  EnableWafCondition: !Equals [!Ref EnableWaf, 'true']
  CreateRoute53: !Equals [!Ref CreateRoute53Records, 'true']

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Environment Configuration
        Parameters: [Environment, ProjectName, VpcStackName, ImageBuilderStackName]
      - Label:
          default: EC2 Configuration
        Parameters: [InstanceType, MinSize, MaxSize, DesiredCapacity, CustomAmiId]
      - Label:
          default: SSL/Domain Configuration
        Parameters: [DomainName, SslCertificateArn, CreateRoute53Records, Route53ZoneId]
      - Label:
          default: Lambda Configuration
        Parameters: [LambdaZipPath, LambdaHandler, LambdaRuntime, LambdaTimeout, LambdaMemory]
      - Label:
          default: Authentication
        Parameters: [CognitoUserPoolId, CognitoUserPoolClientId]
      - Label:
          default: Security
        Parameters: [EnableWaf, WafRateLimit]
      - Label:
          default: Monitoring
        Parameters: [EnableDetailedMonitoring, LogRetentionDays]

Resources:
  # Get latest Amazon Linux 2 AMI if custom AMI not provided
  LatestAmiInfo:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Condition: !Not [!Condition UseCustomAmi]

  # CloudWatch Log Groups
  NginxAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/nginx/access
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  NginxErrorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/nginx/error
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  HitlSyncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/hitl/sync
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-api'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  # IAM Role for EC2 instances
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-ec2-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: S3FrontendAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - Fn::ImportValue: !Sub '${ImageBuilderStackName}-frontend-assets-bucket'
                  - !Sub
                    - '${BucketArn}/*'
                    - BucketArn:
                        Fn::ImportValue: !Sub '${ImageBuilderStackName}-frontend-assets-bucket'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  # Instance Profile for EC2 instances
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ProjectName}-${Environment}-ec2-profile'
      Roles:
        - !Ref EC2Role

  # IAM Role for Lambda function
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: LambdaCustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  # Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-alb-sg'
      GroupDescription: Security group for Application Load Balancer
      VpcId:
        Fn::ImportValue: !Sub '${VpcStackName}-vpc-id'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from anywhere
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alb-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  # Security Group for EC2 instances
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-ec2-sg'
      GroupDescription: Security group for EC2 instances
      VpcId:
        Fn::ImportValue: !Sub '${VpcStackName}-vpc-id'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: HTTP from ALB
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS for AWS API access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP for package downloads
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-ec2-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  # Security Group for Lambda function
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-lambda-sg'
      GroupDescription: Security group for Lambda function
      VpcId:
        Fn::ImportValue: !Sub '${VpcStackName}-vpc-id'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS for AWS API access
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-lambda-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  # S3 Bucket Policy for EC2 instances
  FrontendAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Fn::ImportValue: !Sub '${ImageBuilderStackName}-frontend-assets-bucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowEC2InstancesRead
            Effect: Allow
            Principal:
              AWS: !GetAtt EC2Role.Arn
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - Fn::ImportValue: !Sub '${ImageBuilderStackName}-frontend-assets-bucket'
              - !Sub
                - '${BucketArn}/*'
                - BucketArn:
                    Fn::ImportValue: !Sub '${ImageBuilderStackName}-frontend-assets-bucket'

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-alb'
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub '${VpcStackName}-public-subnet-1-id'
        - Fn::ImportValue: !Sub '${VpcStackName}-public-subnet-2-id'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alb'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  # Target Group for EC2 instances
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-ec2-tg'
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub '${VpcStackName}-vpc-id'
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckProtocol: HTTP
      TargetType: instance
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'false'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '300'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-ec2-tg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  # Target Group for Lambda function
  LambdaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-lambda-tg'
      TargetType: lambda
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-lambda-tg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-api'
      Runtime: !Ref LambdaRuntime
      Handler: !Ref LambdaHandler
      Role: !GetAtt LambdaRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              return {
                  statusCode: 200,
                  body: JSON.stringify({
                      message: 'Hello from Lambda!',
                      timestamp: new Date().toISOString(),
                      environment: process.env.ENVIRONMENT,
                      requestId: event.requestContext?.requestId
                  })
              };
          };
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          PROJECT_NAME: !Ref ProjectName
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClientId
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub '${VpcStackName}-private-subnet-1-id'
          - Fn::ImportValue: !Sub '${VpcStackName}-private-subnet-2-id'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  # Lambda permission for ALB to invoke
  LambdaPermissionForALB:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Ref LambdaTargetGroup

  # Attach Lambda to target group
  LambdaTargetGroupAttachment:
    Type: AWS::ElasticLoadBalancingV2::TargetGroupAttachment
    Properties:
      TargetGroupArn: !Ref LambdaTargetGroup
      TargetId: !GetAtt LambdaFunction.Arn
    DependsOn: LambdaPermissionForALB

  # HTTP Listener
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - !If
          - UseHttps
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: '443'
              StatusCode: HTTP_301
          - Type: forward
            TargetGroupArn: !Ref EC2TargetGroup

  # HTTP Listener Rule for API (when using HTTP only)
  HTTPAPIListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: !Not [!Condition UseHttps]
    Properties:
      ListenerArn: !Ref HTTPListener
      Priority: 100
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LambdaTargetGroup
      Conditions:
        - Field: path-pattern
          Values: ['/api/*']

  # Launch Template for EC2 instances
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ProjectName}-${Environment}-web-template'
      LaunchTemplateData:
        ImageId: !If [UseCustomAmi, !Ref CustomAmiId, !Ref LatestAmiInfo]
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        Monitoring:
          Enabled: !Ref EnableDetailedMonitoring
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
          HttpPutResponseHopLimit: 1
          InstanceMetadataTags: enabled
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            
            # Set up cron job for S3 sync (every 2 minutes)
            echo "*/2 * * * * root /usr/local/bin/sync-from-s3.sh >> /var/log/hitl/sync.log 2>&1" >> /etc/crontab
            echo "*/5 * * * * root /usr/local/bin/generate-health.sh >> /var/log/hitl/health.log 2>&1" >> /etc/crontab
            
            # Environment variables for scripts
            echo "export S3_BUCKET=${ImageBuilderStackName}-frontend-assets-bucket" >> /etc/environment
            echo "export AWS_REGION=${AWS::Region}" >> /etc/environment
            echo "export ENVIRONMENT=${Environment}" >> /etc/environment
            echo "export PROJECT_NAME=${ProjectName}" >> /etc/environment
            
            # Initial sync and health generation
            if [ -f /usr/local/bin/sync-from-s3.sh ]; then
                /usr/local/bin/sync-from-s3.sh
            fi
            
            if [ -f /usr/local/bin/generate-health.sh ]; then
                /usr/local/bin/generate-health.sh
            fi
            
            # Restart cron to pick up new jobs
            systemctl restart crond
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${ProjectName}-${Environment}-web'
              - Key: Environment
                Value: !Ref Environment
              - Key: Project
                Value: !Ref ProjectName
              - Key: ManagedBy
                Value: cloudformation

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ProjectName}-${Environment}-web-asg'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${VpcStackName}-private-subnet-1-id'
        - Fn::ImportValue: !Sub '${VpcStackName}-private-subnet-2-id'
      TargetGroupARNs:
        - !Ref EC2TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-web'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref ProjectName
          PropagateAtLaunch: true
        - Key: ManagedBy
          Value: cloudformation
          PropagateAtLaunch: true

  # Auto Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: -1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  # CloudWatch Alarms
  CPUHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-cpu-high'
      AlarmDescription: This metric monitors ec2 cpu utilization
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleUpPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  CPULowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-cpu-low'
      AlarmDescription: This metric monitors ec2 cpu utilization
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleDownPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

  # ALB Target Health Alarm
  ALBUnhealthyTargetAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-alb-unhealthy-targets'
      AlarmDescription: This metric monitors ALB healthy target count
      MetricName: HealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt EC2TargetGroup.TargetGroupFullName
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: cloudformation

Outputs:
  # Application URLs
  ApplicationURL:
    Description: Application URL (HTTP)
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-application-url'

  ApplicationHTTPSURL:
    Description: Application URL (HTTPS)
    Condition: UseHttps
    Value: !Sub 'https://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-application-https-url'

  # Load Balancer Information
  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${ProjectName}-${Environment}-alb-dns-name'

  LoadBalancerArn:
    Description: ARN of the load balancer
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub '${ProjectName}-${Environment}-alb-arn'

  # S3 Bucket Information
  S3BucketName:
    Description: Name of the S3 bucket for frontend assets
    Value:
      Fn::ImportValue: !Sub '${ImageBuilderStackName}-frontend-assets-bucket'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-s3-bucket-name'

  # Auto Scaling Group
  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-asg-name'

  # Lambda Function
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-lambda-arn'

  # Security Groups
  ALBSecurityGroupId:
    Description: Security group ID for ALB
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-alb-sg-id'

  EC2SecurityGroupId:
    Description: Security group ID for EC2 instances
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-ec2-sg-id'

  LambdaSecurityGroupId:
    Description: Security group ID for Lambda function
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-lambda-sg-id'