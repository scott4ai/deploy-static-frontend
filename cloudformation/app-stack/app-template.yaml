AWSTemplateFormatVersion: '2010-09-09'
Description: 'HITL - Application Infrastructure Stack'

Parameters:
  Environment:
    Type: String
    Description: Environment name (dev, stage, prod)
    AllowedValues:
      - dev
      - stage
      - prod
    Default: dev

  ProjectName:
    Type: String
    Description: Project name for resource naming
    Default: hitl

  # EC2 Configuration
  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t3.small
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large

  MinSize:
    Type: Number
    Description: Minimum number of EC2 instances
    Default: 2
    MinValue: 1
    MaxValue: 10

  MaxSize:
    Type: Number
    Description: Maximum number of EC2 instances
    Default: 4
    MinValue: 1
    MaxValue: 20

  DesiredCapacity:
    Type: Number
    Description: Desired number of EC2 instances
    Default: 2
    MinValue: 1
    MaxValue: 10

  CustomAmiId:
    Type: String
    Description: Custom AMI ID (golden AMI) - leave empty to use latest Amazon Linux 2
    Default: ''

  # Lambda Configuration
  LambdaZipS3Bucket:
    Type: String
    Description: S3 bucket containing Lambda deployment zip
    Default: ''

  LambdaZipS3Key:
    Type: String
    Description: S3 key for Lambda deployment zip
    Default: lambda-deployment.zip

  LambdaHandler:
    Type: String
    Description: Lambda function handler
    Default: index.handler

  LambdaRuntime:
    Type: String
    Description: Lambda runtime
    Default: nodejs18.x
    AllowedValues:
      - nodejs18.x
      - nodejs16.x
      - nodejs14.x

  LambdaTimeout:
    Type: Number
    Description: Lambda timeout in seconds
    Default: 30
    MinValue: 3
    MaxValue: 900

  LambdaMemory:
    Type: Number
    Description: Lambda memory in MB
    Default: 256
    MinValue: 128
    MaxValue: 10240

  # Application Configuration
  DomainName:
    Type: String
    Description: Domain name for SSL certificate (optional)
    Default: ''

  SslCertificateArn:
    Type: String
    Description: SSL certificate ARN (optional, will create if not provided)
    Default: ''

  # WAF Configuration
  EnableWaf:
    Type: String
    Description: Enable AWS WAF
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  WafRateLimit:
    Type: Number
    Description: WAF rate limit per 5 minutes
    Default: 2000
    MinValue: 100
    MaxValue: 100000

  # Monitoring Configuration
  EnableDetailedMonitoring:
    Type: String
    Description: Enable detailed CloudWatch monitoring
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention in days
    Default: 30
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Environment Configuration
        Parameters:
          - Environment
          - ProjectName
      - Label:
          default: EC2 Configuration
        Parameters:
          - InstanceType
          - MinSize
          - MaxSize
          - DesiredCapacity
          - CustomAmiId
      - Label:
          default: Lambda Configuration
        Parameters:
          - LambdaZipS3Bucket
          - LambdaZipS3Key
          - LambdaHandler
          - LambdaRuntime
          - LambdaTimeout
          - LambdaMemory
      - Label:
          default: Application Configuration
        Parameters:
          - DomainName
          - SslCertificateArn
      - Label:
          default: Security Configuration
        Parameters:
          - EnableWaf
          - WafRateLimit
      - Label:
          default: Monitoring Configuration
        Parameters:
          - EnableDetailedMonitoring
          - LogRetentionDays

Mappings:
  # Latest Amazon Linux 2 AMI IDs by region (as of 2025-01)
  RegionMap:
    us-east-1:
      AmazonLinux2: ami-0c02fb55731490381
    us-east-2:
      AmazonLinux2: ami-0443305dabd4be2bc
    us-west-1:
      AmazonLinux2: ami-04b6c97b14c54de18
    us-west-2:
      AmazonLinux2: ami-083ac7c7ecf9bb9b0

Conditions:
  UseCustomAmi: !Not [!Equals [!Ref CustomAmiId, '']]
  CreateCertificate: !And
    - !Not [!Equals [!Ref DomainName, '']]
    - !Equals [!Ref SslCertificateArn, '']
  UseHttps: !Or
    - !Not [!Equals [!Ref SslCertificateArn, '']]
    - !Not [!Equals [!Ref DomainName, '']]
  EnableWafCondition: !Equals [!Ref EnableWaf, 'true']
  UseCustomLambdaSource: !Not [!Equals [!Ref LambdaZipS3Bucket, '']]

Resources:
  # S3 Bucket for React Frontend Assets
  FrontendAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-frontend-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-frontend'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # S3 Bucket Policy
  FrontendAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendAssetsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowEC2InstancesRead
            Effect: Allow
            Principal:
              AWS: !GetAtt EC2Role.Arn
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !GetAtt FrontendAssetsBucket.Arn
              - !Sub '${FrontendAssetsBucket.Arn}/*'

  # CloudWatch Log Groups
  NginxAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/nginx/access
      RetentionInDays: !Ref LogRetentionDays

  NginxErrorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/nginx/error
      RetentionInDays: !Ref LogRetentionDays

  HitlSyncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/hitl/sync
      RetentionInDays: !Ref LogRetentionDays

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-api'
      RetentionInDays: !Ref LogRetentionDays

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-alb-sg'
      GroupDescription: Security group for Application Load Balancer
      VpcId: !ImportValue
        Fn::Sub: '${ProjectName}-${Environment}-vpc-id'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from internet
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alb-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-ec2-sg'
      GroupDescription: Security group for EC2 web servers
      VpcId: !ImportValue
        Fn::Sub: '${ProjectName}-${Environment}-vpc-id'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: HTTP from ALB
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-ec2-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-lambda-sg'
      GroupDescription: Security group for Lambda function
      VpcId: !ImportValue
        Fn::Sub: '${ProjectName}-${Environment}-vpc-id'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !ImportValue
            Fn::Sub: '${ProjectName}-${Environment}-vpc-cidr'
          Description: HTTP outbound
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-lambda-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName  # IAM Roles
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-ec2-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt FrontendAssetsBucket.Arn
                  - !Sub '${FrontendAssetsBucket.Arn}/*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - !GetAtt NginxAccessLogGroup.Arn
                  - !GetAtt NginxErrorLogGroup.Arn
                  - !GetAtt HitlSyncLogGroup.Arn
                  - !Sub '${NginxAccessLogGroup.Arn}:*'
                  - !Sub '${NginxErrorLogGroup.Arn}:*'
                  - !Sub '${HitlSyncLogGroup.Arn}:*'
        - PolicyName: CloudWatchMetrics
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
        - PolicyName: EC2Tags
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeTags
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-ec2-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ProjectName}-${Environment}-ec2-profile'
      Roles:
        - !Ref EC2Role

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt LambdaLogGroup.Arn
                  - !Sub '${LambdaLogGroup.Arn}:*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-lambda-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-alb'
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: !Split
        - ','
        - !ImportValue
          Fn::Sub: '${ProjectName}-${Environment}-public-subnet-ids'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alb'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Target Groups
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-ec2-tg'
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue
        Fn::Sub: '${ProjectName}-${Environment}-vpc-id'
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Stickiness:
        Enabled: false
        Type: lb_cookie
        LbCookieDurationSeconds: 300
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-ec2-tg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  LambdaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-lambda-tg'
      TargetType: lambda
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-lambda-tg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-api'
      Role: !GetAtt LambdaRole.Arn
      Handler: !Ref LambdaHandler
      Runtime: !Ref LambdaRuntime
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Code:
        S3Bucket: !If
          - UseCustomLambdaSource
          - !Ref LambdaZipS3Bucket
          - !Ref AWS::NoValue
        S3Key: !If
          - UseCustomLambdaSource
          - !Ref LambdaZipS3Key
          - !Ref AWS::NoValue
        ZipFile: !If
          - UseCustomLambdaSource
          - !Ref AWS::NoValue
          - |
            exports.handler = async (event) => {
                const response = {
                    statusCode: 200,
                    headers: {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    body: JSON.stringify({
                        message: 'Lambda function placeholder - upload actual deployment package',
                        path: event.path,
                        timestamp: new Date().toISOString()
                    })
                };
                return response;
            };
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          PROJECT_NAME: !Ref ProjectName
          AWS_REGION_NAME: !Ref AWS::Region
          LOG_LEVEL: INFO
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-api'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Lambda Permission for ALB
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Sub
        - 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${TargetGroupName}/*'
        - TargetGroupName: !GetAtt LambdaTargetGroup.TargetGroupName

  # Lambda Target Group Attachment
  LambdaTargetGroupAttachment:
    Type: AWS::ElasticLoadBalancingV2::TargetGroupAttachment
    DependsOn: LambdaInvokePermission
    Properties:
      TargetGroupArn: !Ref LambdaTargetGroup
      TargetId: !GetAtt LambdaFunction.Arn

  # ALB Listeners
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - !If
          - UseHttps
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: 443
              StatusCode: HTTP_301
          - Type: forward
            TargetGroupArn: !Ref EC2TargetGroup

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: UseHttps
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      Certificates:
        - CertificateArn: !If
            - CreateCertificate
            - !Ref SSLCertificate
            - !Ref SslCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup

  # ALB Listener Rules for API routing
  APIRuleHTTP:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: !Not [!Condition UseHttps]
    Properties:
      ListenerArn: !Ref HTTPListener
      Priority: 100
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LambdaTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /api/*

  HealthRuleHTTP:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: !Not [!Condition UseHttps]
    Properties:
      ListenerArn: !Ref HTTPListener
      Priority: 101
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LambdaTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /health*

  APIRuleHTTPS:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: UseHttps
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 100
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LambdaTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /api/*

  HealthRuleHTTPS:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: UseHttps
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 101
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LambdaTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /health*

  # SSL Certificate (if domain provided)
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateCertificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub 'www.${DomainName}'
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-cert'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName  # Launch Template
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ProjectName}-${Environment}-web'
      LaunchTemplateData:
        ImageId: !If
          - UseCustomAmi
          - !Ref CustomAmiId
          - !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2]
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        Monitoring:
          Enabled: !Ref EnableDetailedMonitoring
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
          HttpPutResponseHopLimit: 1
          InstanceMetadataTags: enabled
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${ProjectName}-${Environment}-web'
              - Key: Environment
                Value: !Ref Environment
              - Key: Project
                Value: !Ref ProjectName
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            
            # HITL Platform - EC2 User Data Script
            # Configures instance for serving React frontend from S3
            
            set -e
            
            # Configuration from CloudFormation template variables
            S3_BUCKET_NAME="${FrontendAssetsBucket}"
            AWS_REGION="${AWS::Region}"
            ENVIRONMENT="${Environment}"
            PROJECT_NAME="${ProjectName}"
            LAMBDA_FUNCTION_URL="http://${ApplicationLoadBalancer.DNSName}"
            
            # Logging
            LOG_FILE="/var/log/user-data.log"
            exec > >(tee -a $LOG_FILE)
            exec 2>&1
            
            echo "Starting HITL Platform EC2 configuration..."
            echo "S3 Bucket: $S3_BUCKET_NAME"
            echo "Region: $AWS_REGION"
            echo "Environment: $ENVIRONMENT"
            
            # Set environment variables for services
            cat > /etc/environment << EOF
            S3_BUCKET_NAME=$S3_BUCKET_NAME
            AWS_DEFAULT_REGION=$AWS_REGION
            HITL_S3_BUCKET=$S3_BUCKET_NAME
            ENVIRONMENT=$ENVIRONMENT
            PROJECT_NAME=$PROJECT_NAME
            EOF
            
            # Source environment
            source /etc/environment
            
            # If using base Amazon Linux 2 AMI, install required packages
            if [ ! -f "/usr/bin/nginx" ]; then
                echo "Installing nginx and dependencies..."
                yum update -y
                # Install nginx using Amazon Linux Extras (required for AL2)
                amazon-linux-extras install -y nginx1
                yum install -y awscli
                systemctl enable nginx
            fi
            
            # Configure nginx with complete server block
            echo "Configuring nginx server block..."
            cat > /etc/nginx/conf.d/default.conf << EOF
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                server_name _;
                root /var/www/hitl;
                index index.html index.htm;
            
                # Serve static files
                location / {
                    try_files \$uri \$uri/ /index.html;
                    add_header Cache-Control "public, max-age=3600";
                }
            
                # Proxy API calls to Lambda
                location /api/ {
                    proxy_pass $LAMBDA_FUNCTION_URL;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_connect_timeout 30;
                    proxy_send_timeout 30;
                    proxy_read_timeout 30;
                }
            
                # Health check endpoints
                location /health {
                    access_log off;
                    return 200 "healthy\n";
                    add_header Content-Type text/plain;
                }
            
                location /health-detailed {
                    proxy_pass $LAMBDA_FUNCTION_URL;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_connect_timeout 10;
                    proxy_send_timeout 10;
                    proxy_read_timeout 10;
                }
            
                # Security headers
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-XSS-Protection "1; mode=block" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header Referrer-Policy "no-referrer-when-downgrade" always;
            }
            EOF
            
            # Create web directory and S3 sync configuration
            echo "Setting up web directory and S3 sync configuration..."
            mkdir -p /var/www/hitl
            mkdir -p /etc/hitl
            chown nginx:nginx /var/www/hitl
            
            # Download helper scripts from S3
            echo "Downloading helper scripts from S3..."
            SCRIPTS_BUCKET="${FrontendAssetsBucket}"
            aws s3 cp s3://$SCRIPTS_BUCKET/scripts/sync-from-s3.sh /usr/local/bin/sync-from-s3.sh --region=${AWS::Region} || {
                echo "WARNING: Could not download sync-from-s3.sh, creating fallback version..."
                cat > /usr/local/bin/sync-from-s3.sh << 'EOF'
            #!/bin/bash
            echo "Fallback S3 sync script - downloading from ${FrontendAssetsBucket}"
            aws s3 sync s3://${FrontendAssetsBucket} /var/www/hitl --region=${AWS::Region} --delete
            chown -R nginx:nginx /var/www/hitl
            systemctl reload nginx 2>/dev/null || true
            EOF
            }
            
            aws s3 cp s3://$SCRIPTS_BUCKET/scripts/health-check.sh /usr/local/bin/health-check.sh --region=${AWS::Region} || {
                echo "WARNING: Could not download health-check.sh, creating fallback version..."
                cat > /usr/local/bin/health-check.sh << 'EOF'
            #!/bin/bash
            cat > /var/www/hitl/health-check-response.json << 'EOFHC'
            {
                "status": "healthy",
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                "instance_id": "$(curl -s http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null || echo unknown)",
                "version": "1.0"
            }
            EOFHC
            chown nginx:nginx /var/www/hitl/health-check-response.json
            EOF
            }
            
            # Set up cron job for S3 sync (every 5 minutes)
            echo "*/5 * * * * root /usr/local/bin/sync-from-s3.sh" > /etc/cron.d/s3-sync
            
            # Set up health check cron job (every minute)
            echo "* * * * * root /usr/local/bin/health-check.sh" > /etc/cron.d/health-check
            
            # Make sure scripts are executable
            chmod +x /usr/local/bin/sync-from-s3.sh
            chmod +x /usr/local/bin/health-check.sh
            
            # Create log directory
            mkdir -p /var/log/hitl
            
            # Initial S3 sync to get React build
            echo "Performing initial S3 sync..."
            if /usr/local/bin/sync-from-s3.sh; then
                echo "Initial S3 sync completed successfully"
            else
                echo "Initial S3 sync failed, but continuing..."
                # Create a basic index.html as fallback
                cat > /var/www/hitl/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>HITL Platform - Loading</title>
                <style>
                    body { 
                        font-family: Arial, sans-serif; 
                        text-align: center; 
                        padding: 50px;
                        background-color: #f8f9fa;
                    }
                    .container {
                        max-width: 600px;
                        margin: 0 auto;
                        padding: 20px;
                        background: white;
                        border-radius: 8px;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    }
                    .spinner {
                        border: 4px solid #f3f3f3;
                        border-top: 4px solid #007bff;
                        border-radius: 50%;
                        width: 50px;
                        height: 50px;
                        animation: spin 1s linear infinite;
                        margin: 20px auto;
                    }
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>HITL Platform</h1>
                    <div class="spinner"></div>
                    <p>Application is loading. Syncing content from S3...</p>
                    <p><strong>Infrastructure Status:</strong> EC2 instance is running</p>
                    <p><strong>Next Step:</strong> Waiting for React application deployment</p>
                </div>
            </body>
            </html>
            EOF
                chown nginx:nginx /var/www/hitl/index.html
            fi
            
            # Generate initial health check
            echo "Generating initial health check..."
            /usr/local/bin/health-check.sh || true
            
            # Test nginx configuration
            echo "Testing nginx configuration..."
            if nginx -t; then
                echo "nginx configuration is valid"
                systemctl start nginx
                systemctl enable nginx
                echo "nginx started successfully"
            else
                echo "nginx configuration test failed"
                systemctl status nginx || true
            fi
            
            # Start and enable CloudWatch agent if available
            if [ -f "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl" ]; then
                echo "Starting CloudWatch agent..."
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
                    -a fetch-config -m ec2 -s \
                    -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json || true
            fi
            
            # Set up log rotation for our custom logs
            cat > /etc/logrotate.d/hitl << 'EOF'
            /var/log/hitl/*.log {
                daily
                missingok
                rotate 7
                compress
                notifempty
                create 644 root root
                postrotate
                    systemctl reload nginx > /dev/null 2>&1 || true
                endscript
            }
            EOF
            
            echo "EC2 instance configuration completed successfully!"
            echo "Services status:"
            systemctl status nginx --no-pager -l || true
            echo "S3 sync status:"
            ls -la /var/www/hitl/ || true
            
            # Signal completion to CloudFormation/Auto Scaling (if needed)
            # This would be used with CloudFormation CreationPolicy or ASG lifecycle hooks
            echo "User data script completed at $(date)"

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ProjectName}-${Environment}-web-asg'
      VPCZoneIdentifier: !Split
        - ','
        - !ImportValue
          Fn::Sub: '${ProjectName}-${Environment}-public-subnet-ids'
      TargetGroupARNs:
        - !Ref EC2TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 90
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-web'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref ProjectName
          PropagateAtLaunch: true

  # Auto Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: 300

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: 300

  # CloudWatch Alarms
  CPUHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-cpu-high'
      AlarmDescription: This metric monitors EC2 CPU utilization
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleUpPolicy

  CPULowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-cpu-low'
      AlarmDescription: This metric monitors EC2 CPU utilization
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleDownPolicy

  ALBTargetHealthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-alb-unhealthy-targets'
      AlarmDescription: This metric monitors ALB healthy target count
      MetricName: HealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt EC2TargetGroup.TargetGroupFullName
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName

  # WAF Web ACL
  WafWebACL:
    Type: AWS::WAFv2::WebACL
    Condition: EnableWafCondition
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-waf'
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      Rules:
        - Name: RateLimitRule
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: !Ref WafRateLimit
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRule
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: CommonRuleSetMetric
        - Name: AWSManagedRulesKnownBadInputsRuleSet
          Priority: 3
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: KnownBadInputsRuleSetMetric
        - Name: AWSManagedRulesAmazonIpReputationList
          Priority: 4
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAmazonIpReputationList
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: IpReputationListMetric
        - Name: GeoRestrictionRule
          Priority: 5
          Action:
            Block: {}
          Statement:
            NotStatement:
              Statement:
                GeoMatchStatement:
                  CountryCodes: 
                    - US
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: GeoRestrictionRule
        - Name: SQLiRule
          Priority: 6
          Action:
            Block: {}
          Statement:
            SqliMatchStatement:
              FieldToMatch:
                AllQueryArguments: {}
              TextTransformations:
                - Priority: 0
                  Type: URL_DECODE
                - Priority: 1
                  Type: HTML_ENTITY_DECODE
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: SQLiRule
        - Name: XSSRule
          Priority: 7
          Action:
            Block: {}
          Statement:
            XssMatchStatement:
              FieldToMatch:
                AllQueryArguments: {}
              TextTransformations:
                - Priority: 0
                  Type: URL_DECODE
                - Priority: 1
                  Type: HTML_ENTITY_DECODE
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: XSSRule
        - Name: SizeRestrictionRule
          Priority: 8
          Action:
            Block: {}
          Statement:
            SizeConstraintStatement:
              FieldToMatch:
                Body: {}
              ComparisonOperator: GT
              Size: 8192
              TextTransformations:
                - Priority: 0
                  Type: NONE
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: SizeRestrictionRule
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${ProjectName}-${Environment}-waf'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-waf'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # WAF Association
  WafAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Condition: EnableWafCondition
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    Properties:
      ResourceArn: !Ref ApplicationLoadBalancer
      WebACLArn: !GetAtt WafWebACL.Arn

  # Certificate Expiration Alarm
  CertificateExpiryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateCertificate
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-cert-expiry'
      AlarmDescription: 'SSL certificate expiration monitoring'
      MetricName: DaysToExpiry
      Namespace: AWS/CertificateManager
      Statistic: Minimum
      Period: 86400
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Threshold: 30
      TreatMissingData: breaching
      Dimensions:
        - Name: CertificateArn
          Value: !Ref SSLCertificate
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-cert-expiry-alarm'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

Outputs:
  ALBDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${ProjectName}-${Environment}-alb-dns'

  ALBArn:
    Description: ARN of the load balancer
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub '${ProjectName}-${Environment}-alb-arn'

  S3BucketName:
    Description: Name of the S3 bucket for frontend assets
    Value: !Ref FrontendAssetsBucket
    Export:
      Name: !Sub '${ProjectName}-${Environment}-s3-bucket'

  S3BucketArn:
    Description: ARN of the S3 bucket for frontend assets
    Value: !GetAtt FrontendAssetsBucket.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-s3-bucket-arn'

  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub '${ProjectName}-${Environment}-lambda-function'

  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-lambda-function-arn'

  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-asg-name'

  ApplicationURL:
    Description: URL to access the application
    Value: !If
      - UseHttps
      - !If
        - CreateCertificate
        - !Sub 'https://${DomainName}'
        - !Sub 'https://${ApplicationLoadBalancer.DNSName}'
      - !Sub 'http://${ApplicationLoadBalancer.DNSName}'

  DeploymentInfo:
    Description: Information needed for deployment
    Value: !Sub |
      S3 Bucket: ${FrontendAssetsBucket}
      ALB DNS: ${ApplicationLoadBalancer.DNSName}
      Lambda Function: ${LambdaFunction}
      Auto Scaling Group: ${AutoScalingGroup}
      Environment: ${Environment}
      Project: ${ProjectName}
      Region: ${AWS::Region}